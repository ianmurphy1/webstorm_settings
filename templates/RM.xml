<templateSet group="RM">
  <template name="rmcon" value="function $controllername$($injections$) {&#10;&#10;  &quot;ngInject&quot;;&#10;  const vm = this; &#10;  &#10;  $END$&#10;  &#10;}&#10;&#10;export default {&#10;  name: '$controllername$',&#10;  fn: $controllername$&#10;};" description="Controller template" toReformat="false" toShortenFQNames="true">
    <variable name="controllername" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="injections" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="rmser" value="function $servicename$($injections$) {&#10;  'ngInject';&#10;&#10;  const service = {};&#10;  &#10;  $END$&#10;  &#10;  &#10;  return service;&#10;  &#10;}&#10;&#10;export default {&#10;  name: '$servicename$',&#10;  fn: $servicename$&#10;};" description="Service Template" toReformat="false" toShortenFQNames="true">
    <variable name="servicename" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="injections" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="conl" value="console.log($END$);" description="Consolel log" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="rmnodehand" value="var logger = require('rmpay-logging').logger(module);&#10;&#10;var Handler = function() {&#10;  var handle = function(req, res) {&#10;    var $handlerName$ = require('../utils/$handlerName$');&#10;     //logger.info(&quot;&quot;, TODO);&#10;    $handlerName$($parameter$)&#10;    .then(function($sentback$) {&#10;       //logger.info(&quot;&quot;, $sentback$);&#10;       //enter correct success code for operation&#10;      res.status($successcode$).json($sentback$);&#10;    })&#10;    .catch(function(err) {&#10;      //logger.error(&quot;Error adding asset for agency ID:&quot;, req.body.agencyId);&#10;      //logger.error(err);&#10;      res.status(400).json({&#10;        success: false,&#10;        message: err.message&#10;      });&#10;    });&#10;  };&#10;  return handle;&#10;}();&#10;&#10;module.exports = Handler;" description="Template for create a methid handler" toReformat="false" toShortenFQNames="true">
    <variable name="handlerName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="parameter" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="sentback" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="successcode" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="utilparams" value="'use strict';&#10;/**&#10; * @class $className$&#10; */&#10;var error = require('rmpay-errors');&#10;var svcutils = require('node-rmpay-svcutils');&#10;var logger = require('rmpay-logging').logger(module);&#10;var Promise = require('bluebird');&#10;var rmjs      = require('rmpay-jsonschema');&#10;var validator = new rmjs.Validator('$serviceName$');&#10;var schema    =     rmjs.$serviceName$.$schemaName$;&#10;&#10;/**&#10; *&#10; * Function to $functionDescription$&#10; *&#10; * @method $className$&#10; * @param {String} db The string for connecting to necessary db&#10; * @param {Object} form Object holding the params for this query&#10; * @param {Function} cb The callback used when operation completes&#10; *&#10; */&#10;module.exports = function(db, form, cb) {&#10;  validator.checkValidity(form, schema)&#10;    .then(function (validated) {&#10;      var queryString = require('../impl/db').$className$;&#10;      var queryParams = [validated.id];&#10;      logger.info('Getting route with id of: ', queryParams);&#10;      var dbInteraction = Promise.promisify(svcutils.dbInteraction);&#10;      dbInteraction(db, queryString, queryParams)&#10;        .then(function (result) {&#10;          $END$&#10;        })&#10;        .catch(function (err) {&#10;          var handleDbError = Promise.promisify(svcutils.dbErrorHandler);&#10;          return handleDbError(err, cb);&#10;        });&#10;    })&#10;    .catch(function (err) {&#10;      logger.info(err.formatted);&#10;      cb(err);&#10;    });&#10;};" description="Template for creating a util in node service" toReformat="false" toShortenFQNames="true">
    <variable name="className" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="serviceName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="schemaName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="functionDescription" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="rmroutepost" value="$routeName$.route('$routeUrl$')&#10;  .post(function(req, res) {&#10;    $handlerFunction$(req, res);&#10;  });" description="Template for creating a route in express" toReformat="false" toShortenFQNames="true">
    <variable name="routeName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="routeUrl" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="handlerFunction" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="rmnhandlertest" value="var expect = require('chai').expect,&#10;  sinon = require('sinon'),&#10;  mockery = require('mockery'),&#10;  handler = require('../routes/handlers/$handlername$');&#10;&#10;describe('unit $handlername$ Handler', function() {&#10;  var goodBody = {&#10;    $goodbody$&#10;  };&#10;  &#10;  var badBody = {&#10;    $badbody$&#10;  };&#10;  &#10;  var sandbox;&#10;  before(function(done) {&#10;    sandbox = sinon.sandbox.create();&#10;    var $handlername$ = sandbox.stub();&#10;    &#10;    $handlername$.withArgs(goodBody).returns(Promise.resolve({}));&#10;    $handlername$.withArgs(badBody).returns(Promise.reject('oops'));&#10;    &#10;    mockery.enable();&#10;    mockery.registerAllowable('../routes/handlers/$handlername$');&#10;    mockery.registerMock('../utils/$handlername$', $handlername$);&#10;    done();&#10;  });&#10;  &#10;  after(function (done) {&#10;    mockery.deregisterAll();&#10;    mockery.disable();&#10;    sandbox.restore();&#10;    done();&#10;  });&#10;});" description="Template for setting up a unit test on a handler" toReformat="false" toShortenFQNames="true">
    <variable name="handlername" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="goodbody" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="badbody" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="rmerr" value="&quot;$error_name$&quot;: {&#10;  &quot;status&quot;: $status$,&#10;  &quot;message&quot; $message$,&#10;  &quot;description&quot;: $description$&#10;}$END$ " description="Object for creating new error" toReformat="false" toShortenFQNames="true">
    <variable name="error_name" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="status" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="message" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="description" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JSON" value="true" />
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="rmhit" value="it('should provide a $text$ can be retrieved', function(done) {&#10;    var req = {&#10;      $property$: $END$,&#10;      db: db&#10;    };&#10;&#10;    var res = new Res(done);&#10;    res.expectations = function(status, json) {&#10;      expect(status).to.eql($code$);&#10;      expect(json).to.exist;&#10;    };&#10;    handler(req, res);&#10;  });" description="Template for unit test" toReformat="false" toShortenFQNames="true">
    <variable name="text" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="code" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="property" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="rmval" value="validator.checkValidity($formObj$, schema)&#10;  .then(function (validated) {&#10;    $END$&#10;  })&#10;  .catch(function (err) {&#10;    cb(err);&#10;  });" description="Template for creating the validator" toReformat="false" toShortenFQNames="true">
    <variable name="formObj" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="rmreq" value="require('$END$');" description="Require template" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="utiltest" value="'use strict';&#10;&#10;var expect = require('chai').expect;&#10;var Promise = require('bluebird'),&#10;    testHelpers = require('node-rmpay-testhelpers');&#10;var $testing$ = Promise.promisify(require('../routes/utils/$testing$')),&#10;    seedDb = Promise.promisify(testHelpers.seed),&#10;    getDb = Promise.promisify(testHelpers.getNamedDatabaseConnection);&#10;&#10;describe('unit $testing$', function() {&#10;  var connString,&#10;    agency = 'testagency';&#10;  &#10;  before(function (done) {&#10;    getDb(agency)&#10;      .then(function (db) {&#10;        connString = db;&#10;        done();&#10;      })&#10;      .catch(done);&#10;  });&#10;&#10;  after(function (done) {&#10;  });&#10;&#10;});" description="Live template for a util test" toReformat="false" toShortenFQNames="true">
    <variable name="testing" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="rmseed" value="seedDb(connString, __dirname + '/seed/statements/$statementName$.sql')$END$" description="Quick seed template" toReformat="false" toShortenFQNames="true">
    <variable name="statementName" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="itthen" value="it('$description$', function (done) {&#10;    $testing$(connString$add_params$)&#10;      .then(function ($retObj$) {&#10;        expect($retObj$).to.exist;&#10;        done();&#10;      });&#10;  });" description="Template to get quick success it" toReformat="false" toShortenFQNames="true">
    <variable name="description" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="testing" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="add_params" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="retObj" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="iterr" value="it('$description$', function (done) {&#10;    createImportStatus($params$)&#10;      .catch(function (err) {&#10;        expect(err).to.exist;&#10;        done();&#10;      });&#10;  });" description="Template to quick error it" toReformat="false" toShortenFQNames="true">
    <variable name="description" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="params" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="utilgetif" value="if (result.rows.length &gt; 0) {&#10;  logger.info($loggerText$);&#10;  cb(null, result.rows[0]);&#10;} else {&#10;  var e = error('not_found', {resource_type: '$resourceType$'});&#10;  cb(e);&#10;}" description="Template for when find returns nothing" toReformat="false" toShortenFQNames="true">
    <variable name="loggerText" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="resourceType" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
</templateSet>